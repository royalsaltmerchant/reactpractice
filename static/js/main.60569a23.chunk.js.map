{"version":3,"sources":["components/GiveWeather2.js","index.js"],"names":["GiveWeather2","state","toggle","loading","buttontext","city","units","countrySelect","stateSelect","citySelect","googleUrl","myCity","theirCity","myCountry","myState","googleLat","googleLon","url","googleLocation","predictions","predictionOptions","myClick","bind","onChangeRadio","onChangeCityA","onChangeCityB","onChangeCountry","getLonLat","getGoogle","getUrl","event","console","log","this","setState","value","target","label","replace","fetch","then","response","json","data","name","coordlon","coordlat","weatherid","weathermain","weatherdescription","weathericon","base","maintemp","mainfeelslike","maintempmin","maintempmax","mainpressure","mainhumidity","visibility","windspeed","winddeg","cloudsall","dt","systype","sysid","syscountry","syssunrise","syssunset","timezone","thisid","cod","imgurl","toggleStyle","display","loadinginfo","inputInfo","radioUnits","cityForm","getWeatherDiv","className","style","htmlFor","onChange","options","countryCodeData","isClearable","selectProps","apiKey","autocompletionRequest","types","componentRestrictions","country","type","src","alt","onClick","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60569a23.chunk.js","sourcesContent":["import React from 'react'\nimport Select from 'react-select'\nimport countryCodeData from './countrycode.json'\n// import stateCodeData from './statecode.json'\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete'\n\n//url\n\nconst urlbase = 'http://api.openweathermap.org/data/2.5/weather?appid=6b04193aa2d1531aa6072e2ba7eca3c8'\nconst googleUrlBase = 'https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyCkzZnIUzlDVDEJ-aOKjOcKTPNLBdpGQHY&address='\n//class and bind\nclass GiveWeather2 extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            toggle: 'off',\n            loading: false,\n            buttontext: 'Get Weather',\n            city: '5391959',\n            units: '',\n            countrySelect: '',\n            stateSelect: '',\n            citySelect: null,\n            googleUrl: '',\n            myCity: '',\n            theirCity: '',\n            myCountry: '',\n            myState: '',\n            googleLat: '',\n            googleLon: '',\n            url: '',\n            googleLocation: '',\n            predictions: [],\n            predictionOptions: []\n        }\n    this.myClick = this.myClick.bind(this)\n    this.onChangeRadio = this.onChangeRadio.bind(this)\n    this.onChangeCityA = this.onChangeCityA.bind(this)\n    this.onChangeCityB = this.onChangeCityB.bind(this)\n    this.onChangeCountry = this.onChangeCountry.bind(this)\n    // this.onChangeState = this.onChangeState.bind(this)\n    this.getLonLat = this.getLonLat.bind(this)\n    this.getGoogle = this.getGoogle.bind(this)\n    this.getUrl = this.getUrl.bind(this)\n    }\n\n//Events\nonChangeCountry(event) {\n    console.log(event)\n    this.setState({\n        countrySelect: event\n    }, () => {\n        if(event !== null) {\n            this.setState({\n                myCountry: event.value\n            }, () => {\n                console.log(this.state.myCountry)\n             })\n        } else if(event === null) {\n            this.setState({\n                myCountry: '',\n                myState: '',\n                theirCity: '',\n                stateSelect: null,\n                citySelect: null\n            })\n        }\n    })\n}\n// onChangeState(event) {\n//     console.log(event)\n//     this.setState({\n//         stateSelect: event\n//     }, () => {\n//         if(event !== null) {\n//             this.setState({\n//                 myState: event.value,\n//                 myStateLabel: event.label\n//             }, () => {\n//                 console.log(this.state.myState)\n//                 this.setState({\n//                     googleUrl: googleUrlBase + this.state.myStateLabel\n//                 }, () => {\n//                     console.log(this.state.googleUrl)\n//                     fetch(this.state.googleUrl)\n//                     .then(response => response.json())\n//                     .then(data => {\n//                         console.log(data)\n//                         this.setState({\n//                             googleStateLat: data['results'][0]['geometry']['location']['lat'],\n//                             googleStateLon: data['results'][0]['geometry']['location']['lng']\n//                         }, () => {\n//                             console.log(this.state.googleStateLat, this.state.googleStateLon)\n//                         })\n//                     })\n//                 })\n//             })\n//         } else if(event === null) {\n//             this.setState({\n//                 myState: null,\n//                 theirCity: '',\n//                 citySelect: null,\n//             })\n//         }\n//     })\n// }\nonChangeCityA(event) {\n    this.setState({\n        theirCity: event.target.value\n    })\n}\nonChangeCityB(event) {\n    if(event !== null) {\n        this.setState({\n            citySelect: event\n        }, () => {\n            console.log(this.state.citySelect)\n            this.getLonLat()\n        })\n    } else {\n        this.setState({\n            citySelect: null\n        })\n    }\n}\nonChangeRadio(event) {\n    console.log(event.target.value)\n    if(event.target.value === 'imperial') {\n        this.setState({\n            units: 'imperial'\n        })\n    }\n    else if(event.target.value === 'celsius') {\n        this.setState({\n            units: 'metric'\n        })\n    }\n}\nmyClick() {\n    this.getLonLat()\n    console.log(this.state.citySelect)\n}\ngetLonLat() {\n    if(this.state.myCountry !== '') {\n        this.setState({\n            googleUrl: `${googleUrlBase}${this.state.citySelect.label.replace(' ', '')}`\n        }, () => {\n            console.log(this.state.googleUrl)\n            this.getGoogle()\n        })\n    }\n}\ngetGoogle() {\n    fetch(this.state.googleUrl)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    googleLat: data['results'][0]['geometry']['location']['lat'],\n                    googleLon: data['results'][0]['geometry']['location']['lng']\n                }, () => {\n                    console.log(this.state.googleLat)\n                    console.log(this.state.googleLon)\n                    this.getUrl()\n                })\n            })\n}\ngetUrl() {\n    this.setState({\n        url: `${urlbase}&lat=${this.state.googleLat}&lon=${this.state.googleLon}&units=${this.state.units}`\n    }, () => {\n        console.log(this.state.url)\n        if(this.state.toggle === \"off\" && this.state.url !== '' && this.state.units !== '') {\n            this.setState({\n                toggle: 'on',\n                loading: true,\n                buttontext: 'Stop Weather'\n            },\n            () => {fetch(this.state.url)\n                .then(response => response.json())\n                .then(data => {\n                    // console.log(data)\n                    this.setState({\n                        loading: false,\n                        name: [data['name']],\n                        coordlon: [data['coord']['lon']],\n                        coordlat: [data['coord']['lat']],\n                        weatherid: [data['weather'][0]['id']],\n                        weathermain: [data['weather'][0]['main']],\n                        weatherdescription: [data['weather'][0]['description']],\n                        weathericon: [data['weather'][0]['icon']],\n                        base: [data['base']],\n                        maintemp: [data['main']['temp']],\n                        mainfeelslike: [data['main']['feels_like']],\n                        maintempmin: [data['main']['temp_min']],\n                        maintempmax: [data['main']['temp_max']],\n                        mainpressure: [data['main']['pressure']],\n                        mainhumidity: [data['main']['humidity']],\n                        visibility: [data['visibility']],\n                        windspeed: [data['wind']['speed']],\n                        winddeg: [data['wind']['deg']],\n                        cloudsall: [data['clouds']['all']],\n                        dt: [data['dt']],\n                        systype: [data['sys']['type']],\n                        sysid: [data['sys']['id']],\n                        syscountry: [data['sys']['country']],\n                        syssunrise: [data['sys']['sunrise']],\n                        syssunset: [data['sys']['sunset']],\n                        timezone: [data['timezone']],\n                        thisid: [data['id']],\n                        cod: [data['cod']]\n    \n                    })\n                })\n            })\n    \n        } else if (this.state.toggle === 'on') {\n            this.setState({\n                toggle: 'off',\n                buttontext: 'Get Weather',\n            })\n        }\n    })\n}\n\n//end of events\n//Render\n    render() {\n        var imgurl = `http://openweathermap.org/img/wn/${this.state.weathericon}@2x.png`\n\n        let toggleStyle = {\n            display: 'none'\n        }\n        let loadinginfo = {\n            display: 'none'\n        }\n        let inputInfo = {\n            display: ''\n        }\n        let radioUnits = {\n            display: 'none'\n        }\n        let countryForm = {\n            display: ''\n        }\n        // let stateForm = {\n        //     display: 'none'\n        // }\n        let cityForm = {\n            display: 'none'\n        }\n        let getWeatherDiv = {\n            display: 'none'\n        }\n\n        // if(this.state.myCountry === 'US') {\n        //     stateForm = {\n        //         display: 'flex'\n        //     }\n        // }\n        if(this.state.myCountry !== '' && this.state.myCountry !== null) {\n            cityForm = {\n                display: 'flex'\n            }\n        }\n        // if(this.state.myState !== '' && this.state.myState !== null) {\n        //     cityForm = {\n        //         display: 'flex'\n        //     }\n        // }\n        if(this.state.citySelect !== null) {\n            radioUnits = {\n                display: 'flex'\n            }\n        }\n        if(this.state.units !== '' && this.state.citySelect !== null) {\n            getWeatherDiv = {\n                display: 'flex'\n            }\n        }\n        if(this.state.loading === true) {\n            loadinginfo = {\n                display: 'flex'\n            }\n        }\n        if(this.state.buttontext === 'Stop Weather') {\n            inputInfo = {\n                display: 'none'\n            }\n        }\n        if(this.state.toggle === \"on\" && this.state.url !== '') {\n            toggleStyle = {\n                display: 'flex'\n            }\n\n        }\n//return\n        return (\n            <div>\n                \n                <div className=\"inputinfo\" style={inputInfo}>\n                <div className=\"countryform\" style={countryForm}>\n                    <label htmlFor=\"countryinput\">Country Name: </label>\n                    <br/>\n                    <Select name=\"countryinput\" value={this.state.countrySelect} onChange={this.onChangeCountry} options={countryCodeData} isClearable={true}/>\n                </div>\n                <br/>\n                {/* <div className='stateform' style={stateForm}>\n                    <label htmlFor=\"stateinput\">State Name: </label>\n                    <br/>\n                    <Select name=\"stateinput\" value={this.state.stateSelect} onChange={this.onChangeState} options={stateCodeData} isClearable={true}/>\n                </div>\n                <br/> */}\n                <div className='cityform' style={cityForm} onChange={this.onChangeCityA}>\n                    <label htmlFor=\"cityinput\">City Name: </label>\n                    <br/>\n                    <GooglePlacesAutocomplete \n                        selectProps={{\n                            value: this.state.citySelect,\n                            onChange: this.onChangeCityB,\n                          }}\n                        apiKey=\"AIzaSyDDWFmvc22fxUIqYAG3DNI9y9clzXbWdAY\"\n                        autocompletionRequest={{\n                            types: ['(cities)'],\n                            componentRestrictions: {\n                                country:[this.state.myCountry]\n                            }\n                            \n                          }}\n                    />\n                </div>\n                <br/>\n                <div className=\"radiounits\" style={radioUnits} onChange={this.onChangeRadio}>\n                    <div>\n                    <label htmlFor=\"fahrenheit\">Fahrenheit</label><br/>\n                        <input className=\"radiobutton\" type=\"radio\" name=\"units\" value=\"imperial\"> \n                        </input>\n                    </div>\n                    <br/>\n                    <div>\n                    <label htmlFor=\"celsius\">Celsius</label><br/>\n                        <input className=\"radiobutton\" type=\"radio\" name=\"units\" value=\"celsius\"> \n                        </input>\n                    </div>\n                </div>\n                </div>\n                <p className=\"loadinginfo\" style={loadinginfo}>Loading...</p>\n\n                <div className=\"maindiv\" style={toggleStyle}>\n                    <ul className=\"outer\">\n                        <li className=\"name\">{this.state.name}</li>\n                        <li className=\"name\">{this.state.syscountry}</li>\n                        <li className=\"name\">{this.state.myState}</li>\n                        <br/>\n                        <li className=\"maintemperature\">{this.state.maintemp}°</li>\n                        <li>Feels_Like: {this.state.mainfeelslike}°</li>\n                        <li>Temp_Min: {this.state.maintempmin}°</li>\n                        <li>Temp_Max: {this.state.maintempmax}°</li>\n                        <br/>\n                        <li className=\"weather\">{this.state.weatherdescription}</li>\n                        <li className=\"weather\"><img src={imgurl} alt=\"icon\"></img></li>\n                    </ul>\n                </div>\n                <br/>\n                <div className=\"getweatherdiv\" style={getWeatherDiv}>\n                <button className=\"getweather\" onClick={this.myClick}>{this.state.buttontext}</button>\n                <br/>\n                </div>    \n            </div>\n        )\n    }\n}\n//end return\n//end render\n//export\nexport default GiveWeather2;","import React from 'react'\nimport ReactDOM from 'react-dom'\n//import GiveWeather from './components/GiveWeather.js'\nimport GiveWeather2 from './components/GiveWeather2.js';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <GiveWeather2/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}