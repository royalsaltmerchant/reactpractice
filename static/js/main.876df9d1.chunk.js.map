{"version":3,"sources":["components/GiveWeather2.js","index.js"],"names":["googleUrlBase","GiveWeather2","state","toggle","loading","buttontext","city","units","countrySelect","stateSelect","citySelect","googleUrl","myCity","theirCity","myCountry","myState","googleLat","googleLon","url","googleLocation","predictions","predictionOptions","myClick","bind","onChangeRadio","onChangeCityA","onChangeCityB","onChangeCountry","onChangeState","getLonLat","getGoogle","getUrl","getLocationAuto","event","console","log","this","setState","value","myStateLabel","label","fetch","then","response","json","data","googleStateLat","googleStateLon","target","name","coordlon","coordlat","weatherid","weathermain","weatherdescription","weathericon","base","maintemp","mainfeelslike","maintempmin","maintempmax","mainpressure","mainhumidity","visibility","windspeed","winddeg","cloudsall","dt","systype","sysid","syscountry","syssunrise","syssunset","timezone","thisid","cod","n","length","imgurl","toggleStyle","display","loadinginfo","inputInfo","radioUnits","stateForm","cityForm","getWeatherDiv","className","style","htmlFor","onChange","options","countryCodeData","isClearable","stateCodeData","placeholder","type","src","alt","onClick","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.876df9d1.chunk.js","sourcesContent":["import React from 'react'\nimport Select from 'react-select'\nimport countryCodeData from './countrycode.json'\nimport stateCodeData from './statecode.json'\n\n//url\n\nconst urlbase = 'http://api.openweathermap.org/data/2.5/weather?appid=6b04193aa2d1531aa6072e2ba7eca3c8'\nconst googlePredictionUrlBase = 'https://maps.googleapis.com/maps/api/place/autocomplete/json?types=(cities)&key=AIzaSyDDWFmvc22fxUIqYAG3DNI9y9clzXbWdAY'\nconst googleUrlBase = 'https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyCkzZnIUzlDVDEJ-aOKjOcKTPNLBdpGQHY&address='\n//class and bind\nclass GiveWeather2 extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            toggle: 'off',\n            loading: false,\n            buttontext: 'Get Weather',\n            city: '5391959',\n            units: '',\n            countrySelect: '',\n            stateSelect: '',\n            citySelect: null,\n            googleUrl: '',\n            myCity: '',\n            theirCity: '',\n            myCountry: '',\n            myState: '',\n            googleLat: '',\n            googleLon: '',\n            url: '',\n            googleLocation: '',\n            predictions: [],\n            predictionOptions: []\n        }\n    this.myClick = this.myClick.bind(this)\n    this.onChangeRadio = this.onChangeRadio.bind(this)\n    this.onChangeCityA = this.onChangeCityA.bind(this)\n    this.onChangeCityB = this.onChangeCityB.bind(this)\n    this.onChangeCountry = this.onChangeCountry.bind(this)\n    this.onChangeState = this.onChangeState.bind(this)\n    this.getLonLat = this.getLonLat.bind(this)\n    this.getGoogle = this.getGoogle.bind(this)\n    this.getUrl = this.getUrl.bind(this)\n    this.getLocationAuto = this.getLocationAuto.bind(this)\n    }\n\n//Events\nonChangeCountry(event) {\n    console.log(event)\n    this.setState({\n        countrySelect: event\n    }, () => {\n        if(event !== null) {\n            this.setState({\n                myCountry: event.value\n            }, () => {\n                console.log(this.state.myCountry)\n             })\n        } else if(event === null) {\n            this.setState({\n                myCountry: '',\n                myState: '',\n                theirCity: '',\n                stateSelect: null,\n                citySelect: null\n            })\n        }\n    })\n}\nonChangeState(event) {\n    console.log(event)\n    this.setState({\n        stateSelect: event\n    }, () => {\n        if(event !== null) {\n            this.setState({\n                myState: event.value,\n                myStateLabel: event.label\n            }, () => {\n                console.log(this.state.myState)\n                this.setState({\n                    googleUrl: googleUrlBase + this.state.myStateLabel\n                }, () => {\n                    console.log(this.state.googleUrl)\n                    fetch(this.state.googleUrl)\n                    .then(response => response.json())\n                    .then(data => {\n                        console.log(data)\n                        this.setState({\n                            googleStateLat: data['results'][0]['geometry']['location']['lat'],\n                            googleStateLon: data['results'][0]['geometry']['location']['lng']\n                        }, () => {\n                            console.log(this.state.googleStateLat, this.state.googleStateLon)\n                        })\n                    })\n                })\n            })\n        } else if(event === null) {\n            this.setState({\n                myState: null,\n                theirCity: '',\n                citySelect: null,\n            })\n        }\n    })\n}\nonChangeCityA(event) {\n    this.setState({\n        theirCity: event.target.value\n    }, () => {\n        console.log(this.state.theirCity)\n        if(this.state.theirCity !== '') {\n        this.getLocationAuto()\n        } else {\n            this.setState({\n                predictionOptions: []\n            }, () => {\n                console.log(this.state.predictionOptions)\n            })\n        }\n    })\n}\nonChangeCityB(event) {\n    if(event !== null) {\n        this.setState({\n            citySelect: event\n        })\n    } else {\n        this.setState({\n            citySelect: null\n        })\n    }\n}\nonChangeRadio(event) {\n    console.log(event.target.value)\n    if(event.target.value === 'imperial') {\n        this.setState({\n            units: 'imperial'\n        })\n    }\n    else if(event.target.value === 'celsius') {\n        this.setState({\n            units: 'metric'\n        })\n    }\n}\nmyClick() {\n    this.getLonLat()\n    console.log(this.state.citySelect)\n}\ngetLonLat() {\n    if(this.state.myState === '' && this.state.myCountry !== '') {\n        this.setState({\n            googleUrl: `${googleUrlBase}${this.state.citySelect.value},+${this.state.myCountry}`\n        }, () => {\n            console.log(this.state.googleUrl)\n            this.getGoogle()\n        })\n    }\n    else if(this.state.myState !== '') {\n        this.setState({\n            googleUrl: `${googleUrlBase}${this.state.citySelect.value},+${this.state.myState}`\n        }, () => {\n            console.log(this.state.googleUrl)\n            this.getGoogle()\n        })\n    }\n}\ngetGoogle() {\n    fetch(this.state.googleUrl)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    googleLat: data['results'][0]['geometry']['location']['lat'],\n                    googleLon: data['results'][0]['geometry']['location']['lng']\n                }, () => {\n                    console.log(this.state.googleLat)\n                    console.log(this.state.googleLon)\n                    this.getUrl()\n                })\n            })\n}\ngetUrl() {\n    this.setState({\n        url: `${urlbase}&lat=${this.state.googleLat}&lon=${this.state.googleLon}&units=${this.state.units}`\n    }, () => {\n        console.log(this.state.url)\n        if(this.state.toggle === \"off\" && this.state.url !== '' && this.state.units !== '') {\n            this.setState({\n                toggle: 'on',\n                loading: true,\n                buttontext: 'Stop Weather'\n            },\n            () => {fetch(this.state.url)\n                .then(response => response.json())\n                .then(data => {\n                    // console.log(data)\n                    this.setState({\n                        loading: false,\n                        name: [data['name']],\n                        coordlon: [data['coord']['lon']],\n                        coordlat: [data['coord']['lat']],\n                        weatherid: [data['weather'][0]['id']],\n                        weathermain: [data['weather'][0]['main']],\n                        weatherdescription: [data['weather'][0]['description']],\n                        weathericon: [data['weather'][0]['icon']],\n                        base: [data['base']],\n                        maintemp: [data['main']['temp']],\n                        mainfeelslike: [data['main']['feels_like']],\n                        maintempmin: [data['main']['temp_min']],\n                        maintempmax: [data['main']['temp_max']],\n                        mainpressure: [data['main']['pressure']],\n                        mainhumidity: [data['main']['humidity']],\n                        visibility: [data['visibility']],\n                        windspeed: [data['wind']['speed']],\n                        winddeg: [data['wind']['deg']],\n                        cloudsall: [data['clouds']['all']],\n                        dt: [data['dt']],\n                        systype: [data['sys']['type']],\n                        sysid: [data['sys']['id']],\n                        syscountry: [data['sys']['country']],\n                        syssunrise: [data['sys']['sunrise']],\n                        syssunset: [data['sys']['sunset']],\n                        timezone: [data['timezone']],\n                        thisid: [data['id']],\n                        cod: [data['cod']]\n    \n                    })\n                })\n            })\n    \n        } else if (this.state.toggle === 'on') {\n            this.setState({\n                toggle: 'off',\n                buttontext: 'Get Weather',\n            })\n        }\n    })\n}\ngetLocationAuto() {\n    this.setState({\n        googleLocation: `${googlePredictionUrlBase}&components=country:${this.state.myCountry}&location=${this.state.googleStateLat},${this.state.googleStateLon}&radius=2000&input=${this.state.theirCity}`,\n        predictions: []\n    }, () => {\n        console.log(this.state.googleLocation)\n        fetch(this.state.googleLocation)\n        .then(response => response.json())\n        .then(data => {\n            // console.log(data)\n            for(var n = 0; n < data['predictions'].length; n++) {\n                var predictions = [data['predictions'][n]['terms'][0].value]\n                // console.log(predictions)\n                this.setState({\n                    predictions: [...this.state.predictions, predictions]\n                }, () => {\n                    this.setState({\n                        predictionOptions: [\n                                {\n                                    \"label\": this.state.predictions[0],\n                                    \"value\": this.state.predictions[0]\n                                },\n                                {\n                                    \"label\": this.state.predictions[1],\n                                    \"value\": this.state.predictions[1]\n                                },\n                                {\n                                    \"label\": this.state.predictions[2],\n                                    \"value\": this.state.predictions[2]\n                                },\n                                {\n                                    \"label\": this.state.predictions[3],\n                                    \"value\": this.state.predictions[3]\n                                },\n                                {\n                                    \"label\": this.state.predictions[4],\n                                    \"value\": this.state.predictions[4]\n                                }\n                        ]\n                    })\n                })\n            }\n        })\n    })\n}\n//end of events\n//Render\n    render() {\n        var imgurl = `http://openweathermap.org/img/wn/${this.state.weathericon}@2x.png`\n\n        let toggleStyle = {\n            display: 'none'\n        }\n        let loadinginfo = {\n            display: 'none'\n        }\n        let inputInfo = {\n            display: ''\n        }\n        let radioUnits = {\n            display: 'none'\n        }\n        let countryForm = {\n            display: ''\n        }\n        let stateForm = {\n            display: 'none'\n        }\n        let cityForm = {\n            display: 'none'\n        }\n        let getWeatherDiv = {\n            display: 'none'\n        }\n\n        if(this.state.myCountry === 'US') {\n            stateForm = {\n                display: 'flex'\n            }\n        }\n        if(this.state.myCountry !== '' && this.state.myCountry !== 'US' && this.state.myCountry !== null) {\n            cityForm = {\n                display: 'flex'\n            }\n        }\n        if(this.state.myState !== '' && this.state.myState !== null) {\n            cityForm = {\n                display: 'flex'\n            }\n        }\n        if(this.state.citySelect !== null) {\n            radioUnits = {\n                display: 'flex'\n            }\n        }\n        if(this.state.units !== '' && this.state.citySelect !== null) {\n            getWeatherDiv = {\n                display: 'flex'\n            }\n        }\n        if(this.state.loading === true) {\n            loadinginfo = {\n                display: 'flex'\n            }\n        }\n        if(this.state.buttontext === 'Stop Weather') {\n            inputInfo = {\n                display: 'none'\n            }\n        }\n        if(this.state.toggle === \"on\" && this.state.url !== '') {\n            toggleStyle = {\n                display: 'flex'\n            }\n\n        }\n//return\n        return (\n            <div>\n                \n                <div className=\"inputinfo\" style={inputInfo}>\n                <div className=\"countryform\" style={countryForm}>\n                    <label htmlFor=\"countryinput\">Country Name: </label>\n                    <br/>\n                    <Select name=\"countryinput\" value={this.state.countrySelect} onChange={this.onChangeCountry} options={countryCodeData} isClearable={true}/>\n                </div>\n                <br/>\n                <div className='stateform' style={stateForm}>\n                    <label htmlFor=\"stateinput\">State Name: </label>\n                    <br/>\n                    <Select name=\"stateinput\" value={this.state.stateSelect} onChange={this.onChangeState} options={stateCodeData} isClearable={true}/>\n                </div>\n                <br/>\n                <div className='cityform' style={cityForm} onChange={this.onChangeCityA}>\n                    <label htmlFor=\"cityinput\">City Name: </label>\n                    <br/>\n                    <Select name=\"cityinput\" value={this.state.citySelect} onChange={this.onChangeCityB} options={this.state.predictionOptions} isClearable={true} placeholder=\"Type City Name...\"/>\n                </div>\n                <br/>\n                <div className=\"radiounits\" style={radioUnits} onChange={this.onChangeRadio}>\n                    <div>\n                    <label htmlFor=\"fahrenheit\">Fahrenheit</label><br/>\n                        <input className=\"radiobutton\" type=\"radio\" name=\"units\" value=\"imperial\"> \n                        </input>\n                    </div>\n                    <br/>\n                    <div>\n                    <label htmlFor=\"celsius\">Celsius</label><br/>\n                        <input className=\"radiobutton\" type=\"radio\" name=\"units\" value=\"celsius\"> \n                        </input>\n                    </div>\n                </div>\n                </div>\n                <p className=\"loadinginfo\" style={loadinginfo}>Loading...</p>\n\n                <div className=\"maindiv\" style={toggleStyle}>\n                    <ul className=\"outer\">\n                        <li className=\"name\">{this.state.name}</li>\n                        <li className=\"name\">{this.state.syscountry}</li>\n                        <li className=\"name\">{this.state.myState}</li>\n                        <br/>\n                        <li className=\"maintemperature\">{this.state.maintemp}°</li>\n                        <li>Feels_Like: {this.state.mainfeelslike}°</li>\n                        <li>Temp_Min: {this.state.maintempmin}°</li>\n                        <li>Temp_Max: {this.state.maintempmax}°</li>\n                        <br/>\n                        <li className=\"weather\">{this.state.weatherdescription}</li>\n                        <li className=\"weather\"><img src={imgurl} alt=\"icon\"></img></li>\n                    </ul>\n                </div>\n                <br/>\n                <div className=\"getweatherdiv\" style={getWeatherDiv}>\n                <button className=\"getweather\" onClick={this.myClick}>{this.state.buttontext}</button>\n                <br/>\n                </div>    \n            </div>\n        )\n    }\n}\n//end return\n//end render\n//export\nexport default GiveWeather2;","import React from 'react'\nimport ReactDOM from 'react-dom'\n//import GiveWeather from './components/GiveWeather.js'\nimport GiveWeather2 from './components/GiveWeather2.js';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <GiveWeather2/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}