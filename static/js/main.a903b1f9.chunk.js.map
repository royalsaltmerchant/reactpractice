{"version":3,"sources":["components/GiveWeather2.js","index.js"],"names":["url","myCountry","myCity","GiveWeather2","state","toggle","loading","buttontext","unitprompt","city","units","myClick","bind","onChangeRadio","onChangeCity","onChangeCountry","getId","event","console","log","target","value","this","setState","theirCity","i","jsondata","length","theirCountry","j","countryCodeData","cityId","fetch","then","response","json","data","name","coordlon","coordlat","weatherid","weathermain","weatherdescription","weathericon","base","maintemp","mainfeelslike","maintempmin","maintempmax","mainpressure","mainhumidity","visibility","windspeed","winddeg","cloudsall","dt","systype","sysid","syscountry","syssunrise","syssunset","timezone","thisid","cod","imgurl","chooseunit","display","toggleStyle","loadinginfo","className","onClick","onChange","htmlFor","rows","cols","defaultValue","type","style","src","alt","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a903b1f9.chunk.js","sourcesContent":["import React from 'react'\nimport jsondata from './city.list.json'\nimport countryCodeData from './countrycode.json'\n\n//url `&units=${this.state.units}&id=${this.state.city}`\nlet url = ''\nlet urlbase = 'http://api.openweathermap.org/data/2.5/weather?appid=6b04193aa2d1531aa6072e2ba7eca3c8'\nlet myCountry = ''\nlet myCity = ''\n//class and bind\nclass GiveWeather2 extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            toggle: 'off',\n            loading: false,\n            buttontext: 'Get Weather',\n            unitprompt: false,\n            city: '5391959',\n            units: ''\n        }\n    this.myClick = this.myClick.bind(this)\n    this.onChangeRadio = this.onChangeRadio.bind(this)\n    this.onChangeCity = this.onChangeCity.bind(this)\n    this.onChangeCountry = this.onChangeCountry.bind(this)\n    this.getId = this.getId.bind(this)\n    }\n\n//Events\nonChangeRadio(event) {\n    console.log(event.target.value)\n    if(event.target.value === 'imperial') {\n        this.setState({\n            units: 'imperial'\n        })\n    }\n    else if(event.target.value === 'celsius') {\n        this.setState({\n            units: 'metric'\n        })\n    }\n}\nonChangeCity(event) {\n    let theirCity = event.target.value\n    console.log(theirCity)\n    for(var i = 0; i < jsondata.length; i++) {\n        if(theirCity === jsondata[i]['name']) {\n            myCity = jsondata[i]['name']\n            console.log(myCity)\n        }\n    }\n}\nonChangeCountry(event) {\n    let theirCountry = event.target.value\n    console.log(theirCountry)\n    for(var j = 0; j < countryCodeData.length; j++) {\n        if(theirCountry === countryCodeData[j][\"name\"]) {\n            myCountry = countryCodeData[j][\"code\"]\n            console.log(myCountry)\n        }\n    }\n}\ngetId() {\n    let cityId = ''\n    for(var i = 0; i < jsondata.length; i++) {\n        if(myCountry === jsondata[i]['country'] && myCity === jsondata[i]['name']) {\n            cityId = jsondata[i]['id']\n            console.log(cityId)\n            this.setState({\n                city: cityId\n            }, () => {\n                url = urlbase + `&id=${this.state.city}&units=${this.state.units}`\n            })\n        }\n    }\n}\nmyClick() {\n    this.getId()\n    console.log(this.state.toggle)\n    console.log(this.state.unitprompt)\n    if(this.state.unitprompt === false && this.state.units === '') {\n        this.setState({\n            unitprompt: true\n        })\n    }\n    else if (this.state.unitprompt === true) {\n        this.setState({\n            unitprompt: false\n        })\n    }\n\n    if(this.state.toggle === \"off\" && url !== '' && this.state.units !== '') {\n        this.setState({\n            toggle: 'on',\n            loading: true,\n            buttontext: 'Stop Weather'\n        },\n        () => {fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                // console.log(data)\n                this.setState({\n                    loading: false,\n                    name: [data['name']],\n                    coordlon: [data['coord']['lon']],\n                    coordlat: [data['coord']['lat']],\n                    weatherid: [data['weather'][0]['id']],\n                    weathermain: [data['weather'][0]['main']],\n                    weatherdescription: [data['weather'][0]['description']],\n                    weathericon: [data['weather'][0]['icon']],\n                    base: [data['base']],\n                    maintemp: [data['main']['temp']],\n                    mainfeelslike: [data['main']['feels_like']],\n                    maintempmin: [data['main']['temp_min']],\n                    maintempmax: [data['main']['temp_max']],\n                    mainpressure: [data['main']['pressure']],\n                    mainhumidity: [data['main']['humidity']],\n                    visibility: [data['visibility']],\n                    windspeed: [data['wind']['speed']],\n                    winddeg: [data['wind']['deg']],\n                    cloudsall: [data['clouds']['all']],\n                    dt: [data['dt']],\n                    systype: [data['sys']['type']],\n                    sysid: [data['sys']['id']],\n                    syscountry: [data['sys']['country']],\n                    syssunrise: [data['sys']['sunrise']],\n                    syssunset: [data['sys']['sunset']],\n                    timezone: [data['timezone']],\n                    thisid: [data['id']],\n                    cod: [data['cod']]\n\n                })\n            })\n        })\n\n    } else if (this.state.toggle === 'on') {\n        this.setState({\n            toggle: 'off',\n            buttontext: 'Get Weather',\n            unitprompt: false\n        })\n    }\n}\n//end of events\n//Render\n    render() {\n//prereturn\n        var imgurl = 'http://openweathermap.org/img/wn/' + this.state.weathericon + '@2x.png';\n        let chooseunit = {\n            display: 'none'\n        }\n        let toggleStyle = {\n            display: 'none'\n        }\n        let loadinginfo = {\n            display: 'none',\n        }\n\n        if(this.state.unitprompt === true) {\n            chooseunit = {\n                display: 'block'\n            }\n        }\n\n        if(this.state.loading === true) {\n            loadinginfo = {\n                display: 'flex'\n            }\n        }\n        else if(this.state.toggle === \"on\" && url !== '') {\n            toggleStyle = {\n                display: 'flex'\n            }\n\n        }\n//end prereturn\n//return\n        return (\n            <div>\n                \n                <div className=\"buttoning\">\n                <button onClick={this.myClick}>{this.state.buttontext}</button>\n                <br/>\n                </div>\n                <div className='form' onChange={this.onChangeCity}>\n                    <label htmlFor=\"cityinput\">City Name: </label>\n                    <textarea name=\"cityinput\" rows=\"1\" cols=\"30\" defaultValue=\"San Francisco\">\n                    </textarea>\n                    <p>*Case Sensitive</p>\n                </div>\n                <br/>\n                <div className='form' onChange={this.onChangeCountry}>\n                    <label htmlFor=\"countryinput\">Country Name: </label>\n                    <textarea name=\"countryinput\" rows=\"1\" cols=\"30\" defaultValue=\"United States\">\n                    </textarea>\n                    <p>*Case Sensitive</p>\n                </div>\n                <br/>\n                <div className=\"radiounits\" onChange={this.onChangeRadio}>\n                    <div>\n                    <label htmlFor=\"fahrenheit\">Fahrenheit</label>\n                        <input type=\"radio\" name=\"units\" value=\"imperial\"> \n                        </input>\n                    </div>\n                    <div>\n                    <label htmlFor=\"celsius\">Celsius</label>\n                        <input type=\"radio\" name=\"units\" value=\"celsius\"> \n                        </input>\n                    </div>\n                    <div>\n                    <label htmlFor=\"kelvin\">Kelvin</label>\n                        <input type=\"radio\" name=\"units\" value=\"kelvin\"> \n                        </input>\n                    </div>\n                    <p className=\"chooseunitstyle\" style={chooseunit}>*Please choose a unit of measurement</p>\n                </div>\n\n                <p className=\"loadinginfo\" style={loadinginfo}>Loading...</p>\n\n                <div className=\"maindiv\" style={toggleStyle}>\n                <ul className=\"outer\">\n                        <li className=\"name\"><p>{this.state.name}</p><p>{this.state.syscountry}</p></li>\n                        <br/>\n                        {/* <li className=\"coordinates\">Coordinates: \n                        <ul className=\"inner\">\n                            <li>longitude: {this.state.coordlon}</li>\n                            <li>Latitude: {this.state.coordlat}</li>\n                        </ul>\n                        </li> */}\n                        <br/>\n                        <li className=\"temperature\">Temperature: \n                        <ul className=\"inner\">\n                            <li className=\"maintemperature\">{this.state.maintemp}°</li>\n                            <li>Feels_Like: {this.state.mainfeelslike}°</li>\n                            <li>Temp_Min: {this.state.maintempmin}°</li>\n                            <li>Temp_Max: {this.state.maintempmax}°</li>\n                            <li>Pressure: {this.state.mainpressure}</li>\n                            <li>Humdity: {this.state.mainhumidity}</li>\n                        </ul>\n                        </li>\n                        <br/>\n                        <li className=\"weather\">Current Weather Pattern\n                        <ul className=\"inner\">\n                            {/* <li>ID: {this.state.weatherid}</li> */}\n                            {/* <li>Main: {this.state.weathermain}</li> */}\n                            <li>{this.state.weatherdescription}</li>\n                            <li><img src={imgurl} alt=\"icon\"></img></li>\n                        </ul>\n                        </li>\n                        <br/>\n                        {/* <li className=\"visibility\">Visibility: {this.state.visibility}</li>\n                        <br/> */}\n                        {/* <li className=\"wind\">Wind: \n                        <ul className=\"inner\">\n                            <li>Speed: {this.state.windspeed}</li>\n                            <li>Deg: {this.state.winddeg}</li>\n                        </ul>\n                        </li> */}\n                        {/* <br/>\n                        <li className=\"clouds\">Clouds: \n                        <ul className=\"inner\">\n                            <li>All: {this.state.cloudsall}</li>\n                        </ul>\n                        </li> */}\n                        {/* <br/>\n                        <li className=\"outli\">Sys: \n                        <ul className=\"inner\">\n                            <li>Type: {this.state.systype}</li>\n                            <li>ID: {this.state.sysid}</li>\n                            <li>Country: {this.state.syscountry}</li>\n                            <li>Sunrise: {this.state.syssunrise}</li>\n                            <li>Sunset: {this.state.syssunset}</li>\n                        </ul>\n                        </li>\n                        <br/>\n                        <li className=\"outli\">Timezone: {this.state.timezone}</li>\n                        <br/>\n                        <li className=\"outli\">ID: {this.state.thisid}</li>\n                        <br/>\n                        <li className=\"outli\">Cod: {this.state.cod}</li>\n                        <br/> */}\n                    </ul>\n                </div>\n                    \n            </div>\n        )\n    }\n}\n//end return\n//end render\n//export\nexport default GiveWeather2;","import React from 'react'\nimport ReactDOM from 'react-dom'\n//import GiveWeather from './components/GiveWeather.js'\nimport GiveWeather2 from './components/GiveWeather2.js';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <GiveWeather2/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}