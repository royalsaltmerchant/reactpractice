{"version":3,"sources":["components/GiveWeather2.js","index.js"],"names":["url","GiveWeather2","state","tog","loading","buttontext","unitprompt","myClick","bind","onChangeValue","onChangeRadio","event","console","log","target","value","this","setState","fetch","then","response","json","data","name","coordlon","coordlat","weatherid","weathermain","weatherdescription","weathericon","base","maintemp","mainfeelslike","maintempmin","maintempmax","mainpressure","mainhumidity","visibility","windspeed","winddeg","cloudsall","dt","systype","sysid","syscountry","syssunrise","syssunset","timezone","thisid","cod","imgurl","chooseunit","display","toggleStyle","loadinginfo","className","onClick","onChange","htmlFor","type","style","src","alt","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ab6c318.chunk.js","sourcesContent":["import React from 'react'\n\n//main var for fetch url \nvar url = '';\n\n//class and bind\nclass GiveWeather2 extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            tog: 'off',\n            loading: false,\n            buttontext: 'Get Weather',\n            unitprompt: false\n        }\n    this.myClick = this.myClick.bind(this)\n    this.onChangeValue = this.onChangeRadio.bind(this)\n    }\n//\n\n//Events\nonChangeRadio(event) {\n    console.log(event.target.value)\n    if(event.target.value === 'fahrenheit') {\n        url = 'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco&units=imperial&appid=6b04193aa2d1531aa6072e2ba7eca3c8'\n    }\n    else if(event.target.value === 'celsius') {\n        url = 'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco&units=metric&appid=6b04193aa2d1531aa6072e2ba7eca3c8'\n    }\n    else if(event.target.value === 'kelvin') {\n        url = 'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco&appid=6b04193aa2d1531aa6072e2ba7eca3c8'\n    }\n}\n\nmyClick() {\n    console.log(this.state.tog)\n\n    if(this.state.unitprompt === false) {\n        this.setState({\n            unitprompt: true\n        })\n    }\n    else if (this.state.unitprompt === true & url !== '') {\n        this.setState({\n            unitprompt: false\n        })\n    }\n\n    if(this.state.tog === \"off\" && url !== '') {\n        this.setState({\n            tog: 'on',\n            loading: true,\n            buttontext: 'Stop Weather',\n        })\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    loading: false,\n                    name: [data['name']],\n                    coordlon: [data['coord']['lon']],\n                    coordlat: [data['coord']['lat']],\n                    weatherid: [data['weather'][0]['id']],\n                    weathermain: [data['weather'][0]['main']],\n                    weatherdescription: [data['weather'][0]['description']],\n                    weathericon: [data['weather'][0]['icon']],\n                    base: [data['base']],\n                    maintemp: [data['main']['temp']],\n                    mainfeelslike: [data['main']['feels_like']],\n                    maintempmin: [data['main']['temp_min']],\n                    maintempmax: [data['main']['temp_max']],\n                    mainpressure: [data['main']['pressure']],\n                    mainhumidity: [data['main']['humidity']],\n                    visibility: [data['visibility']],\n                    windspeed: [data['wind']['speed']],\n                    winddeg: [data['wind']['deg']],\n                    cloudsall: [data['clouds']['all']],\n                    dt: [data['dt']],\n                    systype: [data['sys']['type']],\n                    sysid: [data['sys']['id']],\n                    syscountry: [data['sys']['country']],\n                    syssunrise: [data['sys']['sunrise']],\n                    syssunset: [data['sys']['sunset']],\n                    timezone: [data['timezone']],\n                    thisid: [data['id']],\n                    cod: [data['cod']]\n\n                })\n            })\n\n    } else if (this.state.tog === 'on') {\n        this.setState({\n            tog: 'off',\n            buttontext: 'Get Weather',\n            unitprompt: false\n        })\n    }\n}\n//end of events\n//Render\n    render() {\n//prereturn\n        var imgurl = 'http://openweathermap.org/img/wn/' + this.state.weathericon + '@2x.png';\n        let chooseunit = {\n            display: 'none'\n        }\n        let toggleStyle = {\n            display: 'none'\n        }\n        let loadinginfo = {\n            display: 'none',\n        }\n\n        if(this.state.unitprompt === true) {\n            chooseunit = {\n                display: 'block'\n            }\n        }\n\n        if(this.state.loading === true) {\n            loadinginfo = {\n                display: 'block'\n            }\n        }\n        else if(this.state.tog === \"on\" && url !== '') {\n            toggleStyle = {\n                display: 'flex'\n            }\n\n        }\n//end prereturn\n//return\n        return (\n            <div>\n                \n                <div className=\"buttoning\">\n                <button onClick={this.myClick}>{this.state.buttontext}</button>\n                <br/>\n                \n                <div className=\"radiounits\" onChange={this.onChangeRadio}>\n                    <div>\n                    <label htmlFor=\"fahrenheit\">Fahrenheit</label>\n                        <input type=\"radio\" name=\"units\" value=\"fahrenheit\"> \n                        </input>\n                    </div>\n                    <div>\n                    <label htmlFor=\"celsius\">Celsius</label>\n                        <input type=\"radio\" name=\"units\" value=\"celsius\"> \n                        </input>\n                    </div>\n                    <div>\n                    <label htmlFor=\"kelvin\">Kelvin</label>\n                        <input type=\"radio\" name=\"units\" value=\"kelvin\"> \n                        </input>\n                    </div>\n                    <p className=\"chooseunitstyle\" style={chooseunit}>*Please choose a unit of measurement</p>\n                </div>\n\n                <p className=\"loadinginfo\" style={loadinginfo}>Loading...</p>\n                </div>\n\n                <div style={toggleStyle}>\n                <ul className=\"outer\">\n                        <li className=\"outli\">Name: {this.state.name}</li>\n                        <br/>\n                        <li className=\"outli\">Coordinates: \n                        <ul className=\"inner\">\n                            <li>longitude: {this.state.coordlon}</li>\n                            <li>Latitude: {this.state.coordlat}</li>\n                        </ul>\n                        </li>\n                        <br/>\n                        <li className=\"outli\">Weather: \n                        <ul className=\"inner\">\n                            <li>ID: {this.state.weatherid}</li>\n                            <li>Main: {this.state.weathermain}</li>\n                            <li>Description: {this.state.weatherdescription}</li>\n                            <li><img src={imgurl} alt=\"icon\"></img></li>\n                        </ul>\n                        </li>\n                        <br/>\n                        <li className=\"outli\">Temperature: \n                        <ul className=\"inner\">\n                            <li>Temp: {this.state.maintemp}</li>\n                            <li>Feels_Like: {this.state.mainfeelslike}</li>\n                            <li>Temp_Min: {this.state.maintempmin}</li>\n                            <li>Temp_Max: {this.state.maintempmax}</li>\n                            <li>Pressure: {this.state.mainpressure}</li>\n                            <li>Humdity: {this.state.mainhumidity}</li>\n                        </ul>\n                        </li>\n                        <br/>\n                        <li className=\"outli\">Visibility: {this.state.visibility}</li>\n                        <br/>\n                        <li className=\"outli\">Wind: \n                        <ul className=\"inner\">\n                            <li>Speed: {this.state.windspeed}</li>\n                            <li>Deg: {this.state.winddeg}</li>\n                        </ul>\n                        </li>\n                        <br/>\n                        <li className=\"outli\">Clouds: \n                        <ul className=\"inner\">\n                            <li>All: {this.state.cloudsall}</li>\n                        </ul>\n                        </li>\n                        <br/>\n                        {/* <li className=\"outli\">Sys: \n                        <ul className=\"inner\">\n                            <li>Type: {this.state.systype}</li>\n                            <li>ID: {this.state.sysid}</li>\n                            <li>Country: {this.state.syscountry}</li>\n                            <li>Sunrise: {this.state.syssunrise}</li>\n                            <li>Sunset: {this.state.syssunset}</li>\n                        </ul>\n                        </li>\n                        <br/> */}\n                        <li className=\"outli\">Timezone: {this.state.timezone}</li>\n                        <br/>\n                        <li className=\"outli\">ID: {this.state.thisid}</li>\n                        <br/>\n                        {/*\n                        <li className=\"outli\">Cod: {this.state.cod}</li>\n                        <br/> */}\n                    </ul>\n                </div>\n                    \n            </div>\n        )\n    }\n}\n//end return\n//end render\n//export\nexport default GiveWeather2;","import React from 'react'\nimport ReactDOM from 'react-dom'\n//import GiveWeather from './components/GiveWeather.js'\nimport GiveWeather2 from './components/GiveWeather2.js';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <GiveWeather2/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}